-----------------------------------com.gen.test.model.TheResourceId.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class TheResourceId implements Serializable
{

    /**
     * The UUID of this resource.
     * 
     */
    protected String id;

    /**
     * Creates a new TheResourceId.
     * 
     */
    public TheResourceId() {
        super();
    }

    /**
     * Creates a new TheResourceId.
     * 
     */
    public TheResourceId(String id) {
        super();
        this.id = id;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    @NotNull
    @Pattern(regexp = "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")
    public String getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(String id) {
        this.id = id;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(id).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        TheResourceId otherObject = ((TheResourceId) other);
        return new EqualsBuilder().append(id, otherObject.id).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("id", id).toString();
    }

}
-----------------------------------com.gen.test.AResourceController.java-----------------------------------

package com.gen.test;

import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import com.gen.test.model.TheResourceId;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.@project.version@)
 * 
 */
public interface AResourceController {


    /**
     * No description
     * 
     */
    public ResponseEntity<TheResourceId> getTheResourceIdByAnHeader(
        @Pattern(regexp = "^[a-z]+$")
        @Size(min = 3, max = 16)
        String anHeader);

}
-----------------------------------com.gen.test.AResourceControllerDecorator.java-----------------------------------

package com.gen.test;

import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import com.gen.test.model.TheResourceId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.@project.version@)
 * 
 */
@RestController
@RequestMapping(value = "/api/a_resource", produces = "application/json")
@Validated
public class AResourceControllerDecorator
    implements AResourceController
{

    @Autowired
    private AResourceController aResourceControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<TheResourceId> getTheResourceIdByAnHeader(
        @Pattern(regexp = "^[a-z]+$")
        @Size(min = 3, max = 16)
        @RequestHeader(name = "an_header", required = false)
        String anHeader) {
        return this.aResourceControllerDelegate.getTheResourceIdByAnHeader(anHeader);
    }

}
