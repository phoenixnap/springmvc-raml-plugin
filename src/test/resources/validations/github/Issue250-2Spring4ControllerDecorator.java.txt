-----------------------------------com.gen.test.model.User.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import javax.validation.constraints.NotNull;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class User implements Serializable
{

    @JsonProperty("firstName")
    protected String firstNameDisplayName;

    /**
     * Creates a new User.
     * 
     */
    public User() {
        super();
    }

    /**
     * Creates a new User.
     * 
     */
    public User(String firstNameDisplayName) {
        super();
        this.firstNameDisplayName = firstNameDisplayName;
    }

    /**
     * Returns the firstNameDisplayName.
     * 
     * @return
     *     firstNameDisplayName
     */
    @NotNull
    public String getFirstNameDisplayName() {
        return firstNameDisplayName;
    }

    /**
     * Set the firstNameDisplayName.
     * 
     * @param firstNameDisplayName
     *     the new firstNameDisplayName
     */
    public void setFirstNameDisplayName(String firstNameDisplayName) {
        this.firstNameDisplayName = firstNameDisplayName;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstNameDisplayName).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        User otherObject = ((User) other);
        return new EqualsBuilder().append(firstNameDisplayName, otherObject.firstNameDisplayName).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstNameDisplayName", firstNameDisplayName).toString();
    }

}
-----------------------------------com.gen.test.TestController.java-----------------------------------

package com.gen.test;

import javax.validation.Valid;
import com.gen.test.model.User;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.@project.version@)
 * 
 */
public interface TestController {


    /**
     * No description
     * 
     */
    public ResponseEntity<?> createMethodObject(
        @Valid
        User user);

    /**
     * No description
     * 
     */
    public ResponseEntity<User> getMethodDisplayName(Long uriParamDisplayName, String queryParamDisplayName, String headerParamDisplayName);

    /**
     * No description
     * 
     */
    public ResponseEntity<?> updateMethodDisplayName(Long uriParamDisplayName,
        @Valid
        User user);

    /**
     * No description
     * 
     */
    public ResponseEntity<?> deleteMethod(Long uriParamDisplayName);

}
-----------------------------------com.gen.test.TestControllerDecorator.java-----------------------------------

package com.gen.test;

import javax.validation.Valid;
import com.gen.test.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.@project.version@)
 * 
 */
@RestController
@RequestMapping("/api/test")
@Validated
public class TestControllerDecorator
    implements TestController
{

    @Autowired
    private TestController testControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<?> createMethodObject(
        @Valid
        @RequestBody
        User user) {
        return this.testControllerDelegate.createMethodObject(user);
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "/{testId}", method = RequestMethod.GET)
    public ResponseEntity<User> getMethodDisplayName(
        @PathVariable("testId")
        Long uriParamDisplayName,
        @RequestParam(name = "queryParam")
        String queryParamDisplayName,
        @RequestHeader(name = "headerParam")
        String headerParamDisplayName) {
        return this.testControllerDelegate.getMethodDisplayName(uriParamDisplayName, queryParamDisplayName, headerParamDisplayName);
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "/{testId}", method = RequestMethod.PUT)
    public ResponseEntity<?> updateMethodDisplayName(
        @PathVariable("testId")
        Long uriParamDisplayName,
        @Valid
        @RequestBody
        User user) {
        return this.testControllerDelegate.updateMethodDisplayName(uriParamDisplayName, user);
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "/{testId}", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteMethod(
        @PathVariable("testId")
        Long uriParamDisplayName) {
        return this.testControllerDelegate.deleteMethod(uriParamDisplayName);
    }

}
