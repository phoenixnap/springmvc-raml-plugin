-----------------------------------com.gen.test.model.NamedResponseType.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NamedResponseType implements Serializable
{


    /**
     * Creates a new NamedResponseType.
     * 
     */
    public NamedResponseType() {
        super();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        NamedResponseType otherObject = ((NamedResponseType) other);
        return new EqualsBuilder().isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).toString();
    }

}
-----------------------------------com.gen.test.BaseClient.java-----------------------------------

package com.gen.test;

import java.math.BigDecimal;
import com.gen.test.model.NamedResponseType;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;


/**
 * The BaseController class
 * (Generated with springmvc-raml-parser v.@project.version@)
 * 
 */
public interface BaseClient {


    /**
     * No description
     *
     * @param httpHeaders The HTTP headers for the request
     */
    public ResponseEntity<?> getObject(HttpHeaders httpHeaders);

    /**
     * Get base entity by ID
     *
     * @param httpHeaders The HTTP headers for the request
     * @param id 
     */
    public ResponseEntity<NamedResponseType> getNamedResponseTypeById(String id, HttpHeaders httpHeaders);

    /**
     * No description
     * 
     * @param optionalQueryParam
     * @param xAnotherHeader
     * @param httpHeaders The HTTP headers for the request
     * @param id 
     * @param requiredQueryParam 
     * @param optionalQueryParam2
     * @param xMyHeader
     */
    public ResponseEntity<?> getObject(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader, HttpHeaders httpHeaders);

}
-----------------------------------com.gen.test.BaseClientImpl.java-----------------------------------

package com.gen.test;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import com.gen.test.model.NamedResponseType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;


/**
 * The BaseController class
 * (Generated with springmvc-raml-parser v.@project.version@)
 * 
 */
@Component
public class BaseClientImpl
    implements BaseClient
{

    @Value("${client.url}")
    private String baseUrl;
    @Autowired
    private RestTemplate restTemplate;

    /**
     * No description
     * 
     */
    public ResponseEntity<?> getObject(HttpHeaders httpHeaders) {
        //  Add Accepts Headers and Body Content-Type
        ArrayList<MediaType> acceptsList = new ArrayList<MediaType>();
        acceptsList.add(MediaType.valueOf("application/json"));
        httpHeaders.setAccept(acceptsList);
        String url = baseUrl.concat("/base");
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);
        UriComponents uriComponents = builder.build();
        HttpEntity httpEntity = new HttpEntity(httpHeaders);
        return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, Object.class);
    }

    /**
     * Get base entity by ID
     * 
     */
    public ResponseEntity<NamedResponseType> getNamedResponseTypeById(String id, HttpHeaders httpHeaders) {
        //  Add Accepts Headers and Body Content-Type
        ArrayList<MediaType> acceptsList = new ArrayList<MediaType>();
        acceptsList.add(MediaType.valueOf("application/json"));
        httpHeaders.setAccept(acceptsList);
        String url = baseUrl.concat("/base/{id}");
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);
        UriComponents uriComponents = builder.build();
        HttpEntity httpEntity = new HttpEntity(httpHeaders);
        Map<String, Object> uriParamMap = new HashMap();
        uriParamMap.put("id", id);
        uriComponents = uriComponents.expand(uriParamMap);
        return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, NamedResponseType.class);
    }

    /**
     * No description
     * 
     */
    public ResponseEntity<?> getObject(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader, HttpHeaders httpHeaders) {
        //  Add Accepts Headers and Body Content-Type
        ArrayList<MediaType> acceptsList = new ArrayList<MediaType>();
        acceptsList.add(MediaType.valueOf("application/json"));
        httpHeaders.setAccept(acceptsList);
        if (xMyHeader!= null) {
            httpHeaders.add("X-My-Header", xMyHeader.toString());
        }
        if (xAnotherHeader!= null) {
            httpHeaders.add("X-Another-Header", xAnotherHeader.toString());
        }
        String url = baseUrl.concat("/base/{id}/elements");
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);
        if (requiredQueryParam!= null) {
            builder.queryParam("requiredQueryParam", requiredQueryParam);
        }
        if (optionalQueryParam!= null) {
            builder.queryParam("optionalQueryParam", optionalQueryParam);
        }
        if (optionalQueryParam2 != null) {
            builder.queryParam("optionalQueryParam2", optionalQueryParam2);
        }
        UriComponents uriComponents = builder.build();
        HttpEntity httpEntity = new HttpEntity(httpHeaders);
        Map<String, Object> uriParamMap = new HashMap();
        uriParamMap.put("id", id);
        uriComponents = uriComponents.expand(uriParamMap);
        return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, Object.class);
    }

}