-----------------------------------com.gen.test.model.Import.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.math.BigInteger;
import javax.validation.constraints.NotNull;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Import implements Serializable
{

    /**
     * Monetary amount.
     * 
     * 
     */
    protected Double amount;
    /**
     * String based on ISO-4217 for specifying the currency related to the amount.
     * 
     * 
     */
    protected String currency;
    protected BigInteger integer;
    @JsonProperty("while")
    protected String whileCustom;
    @JsonProperty("super")
    protected Double superCustom;

    /**
     * Creates a new Import.
     * 
     */
    public Import() {
        super();
    }

    /**
     * Creates a new Import.
     * 
     */
    public Import(Double amount, String currency, BigInteger integer, String whileCustom, Double superCustom) {
        super();
        this.amount = amount;
        this.currency = currency;
        this.integer = integer;
        this.whileCustom = whileCustom;
        this.superCustom = superCustom;
    }

    /**
     * Returns the amount.
     * 
     * @return
     *     amount
     */
    public Double getAmount() {
        return amount;
    }

    /**
     * Set the amount.
     * 
     * @param amount
     *     the new amount
     */
    public void setAmount(Double amount) {
        this.amount = amount;
    }

    /**
     * Returns the currency.
     * 
     * @return
     *     currency
     */
    public String getCurrency() {
        return currency;
    }

    /**
     * Set the currency.
     * 
     * @param currency
     *     the new currency
     */
    public void setCurrency(String currency) {
        this.currency = currency;
    }

    /**
     * Returns the integer.
     * 
     * @return
     *     integer
     */
    public BigInteger getInteger() {
        return integer;
    }

    /**
     * Set the integer.
     * 
     * @param integer
     *     the new integer
     */
    public void setInteger(BigInteger integer) {
        this.integer = integer;
    }

    /**
     * Returns the whileCustom.
     * 
     * @return
     *     whileCustom
     */
    @NotNull
    public String getWhileCustom() {
        return whileCustom;
    }

    /**
     * Set the whileCustom.
     * 
     * @param whileCustom
     *     the new whileCustom
     */
    public void setWhileCustom(String whileCustom) {
        this.whileCustom = whileCustom;
    }

    /**
     * Returns the superCustom.
     * 
     * @return
     *     superCustom
     */
    @NotNull
    public Double getSuperCustom() {
        return superCustom;
    }

    /**
     * Set the superCustom.
     * 
     * @param superCustom
     *     the new superCustom
     */
    public void setSuperCustom(Double superCustom) {
        this.superCustom = superCustom;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(amount).append(currency).append(integer).append(whileCustom).append(superCustom).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Import otherObject = ((Import) other);
        return new EqualsBuilder().append(amount, otherObject.amount).append(currency, otherObject.currency).append(integer, otherObject.integer).append(whileCustom, otherObject.whileCustom).append(superCustom, otherObject.superCustom).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("amount", amount).append("currency", currency).append("integer", integer).append("whileCustom", whileCustom).append("superCustom", superCustom).toString();
    }

}
-----------------------------------com.gen.test.BreakController.java-----------------------------------

package com.gen.test;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import javax.validation.Valid;
import com.gen.test.model.Import;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.@project.version@)
 * 
 */
public interface BreakController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Import> createImport(BigDecimal longCustom, Boolean booleanCustom,
        @Valid
        Import importCustom);

    /**
     * No description
     * 
     */
    public ResponseEntity<List<Import>> getImports(BigDecimal byteCustom, Date returnCustom, String voidCustom, BigDecimal defaultCustom);

}
-----------------------------------com.gen.test.BreakControllerDecorator.java-----------------------------------

package com.gen.test;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import javax.validation.Valid;
import com.gen.test.model.Import;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.@project.version@)
 * 
 */
@RestController
@RequestMapping("/api/break")
@Validated
public class BreakControllerDecorator
    implements BreakController
{

    @Autowired
    private BreakController breakControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<Import> createImport(
        @RequestParam(name = "long")
        BigDecimal longCustom,
        @RequestParam(name = "boolean")
        Boolean booleanCustom,
        @Valid
        @RequestBody
        Import importCustom) {
        return this.breakControllerDelegate.createImport(longCustom, booleanCustom, importCustom);
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "/{byte}", method = RequestMethod.GET)
    public ResponseEntity<List<Import>> getImports(
        @PathVariable(name = "byte")
        BigDecimal byteCustom,
        @RequestParam(name = "return")
        @DateTimeFormat(pattern = "yyyy-MM-dd")
        Date returnCustom,
        @RequestParam(name = "void")
        String voidCustom,
        @RequestParam(name = "default")
        BigDecimal defaultCustom) {
        return this.breakControllerDelegate.getImports(byteCustom, returnCustom, voidCustom, defaultCustom);
    }

}

