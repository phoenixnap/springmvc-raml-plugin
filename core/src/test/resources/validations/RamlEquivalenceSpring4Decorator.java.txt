-----------------------------------com.gen.test.PersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import javax.validation.Valid;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.@project.version@)
 * 
 */
public interface PersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<com.gen.test.model.Person>> getPersons();

    /**
     * No description
     * 
     */
    public ResponseEntity<?> createPerson(
        @Valid
        com.gen.test.model.Person person);

}
-----------------------------------com.gen.test.PersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.@project.version@)
 * 
 */
@RestController
@RequestMapping(value = "/api/persons", produces = "application/json")
@Validated
public class PersonControllerDecorator
    implements PersonController
{

    @Autowired
    private PersonController personControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<com.gen.test.model.Person>> getPersons() {
        return this.personControllerDelegate.getPersons();
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<?> createPerson(
        @Valid
        @RequestBody
        com.gen.test.model.Person person) {
        return this.personControllerDelegate.createPerson(person);
    }

}
