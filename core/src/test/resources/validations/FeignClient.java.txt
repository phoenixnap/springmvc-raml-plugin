-----------------------------------com.gen.test.model.Song.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import javax.validation.constraints.NotNull;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Song implements Serializable
{

    protected String songId;
    protected String songTitle;
    protected String artist;

    /**
     * Creates a new Song.
     * 
     */
    public Song() {
        super();
    }

    /**
     * Creates a new Song.
     * 
     */
    public Song(String songId, String songTitle, String artist) {
        super();
        this.songId = songId;
        this.songTitle = songTitle;
        this.artist = artist;
    }

    /**
     * Returns the songId.
     * 
     * @return
     *     songId
     */
    @NotNull
    public String getSongId() {
        return songId;
    }

    /**
     * Set the songId.
     * 
     * @param songId
     *     the new songId
     */
    public void setSongId(String songId) {
        this.songId = songId;
    }

    /**
     * Returns the songTitle.
     * 
     * @return
     *     songTitle
     */
    @NotNull
    public String getSongTitle() {
        return songTitle;
    }

    /**
     * Set the songTitle.
     * 
     * @param songTitle
     *     the new songTitle
     */
    public void setSongTitle(String songTitle) {
        this.songTitle = songTitle;
    }

    /**
     * Returns the artist.
     * 
     * @return
     *     artist
     */
    @NotNull
    public String getArtist() {
        return artist;
    }

    /**
     * Set the artist.
     * 
     * @param artist
     *     the new artist
     */
    public void setArtist(String artist) {
        this.artist = artist;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(songId).append(songTitle).append(artist).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Song otherObject = ((Song) other);
        return new EqualsBuilder().append(songId, otherObject.songId).append(songTitle, otherObject.songTitle).append(artist, otherObject.artist).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("songId", songId).append("songTitle", songTitle).append("artist", artist).toString();
    }

}
-----------------------------------com.gen.test.SongClient.java-----------------------------------

package com.gen.test;

import java.util.List;
import javax.validation.Valid;
import com.gen.test.model.Song;
import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;


/**
 * Songs services
 * (Generated with springmvc-raml-parser v.@project.version@)
 * 
 */
@FeignClient(path = "/api/songs", name = "songClient")
public interface SongClient {


    /**
     * Gets all songs
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Song>> getSongs();

    /**
     * Creates new song
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<Song> createSong(
        @Valid
        @RequestBody
        Song song);

    /**
     * Gets song by id
     * 
     */
    @RequestMapping(value = "/{songId}", method = RequestMethod.GET)
    public ResponseEntity<Song> getSongBySongId(
        @PathVariable(name = "songId")
        String songId);

    /**
     * Updates song
     * 
     */
    @RequestMapping(value = "/{songId}", method = RequestMethod.PUT)
    public ResponseEntity<Song> updateSong(
        @PathVariable(name = "songId")
        String songId,
        @Valid
        @RequestBody
        Song song);

    /**
     * Deletes song
     * 
     */
    @RequestMapping(value = "/{songId}", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteSongBySongId(
        @PathVariable(name = "songId")
        String songId);

}
